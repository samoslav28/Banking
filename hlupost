
@media screen and (min-width: 600px) {
    .input_form{
        display: flex;
        flex-direction: row;
        justify-content: center;
        font-size: 20px;
    }
    
    input{
        margin: 5px;
        /* background-color: transparent; */
        border: none;
        /* color: white; */
    }
    h1{
        flex-wrap: wrap;
        margin: 10px 60px;
        /* margin-right: 40vh; */
        max-width: 100%;
        text-align: center;
    }
  }
  
  @media screen and (min-width: 1200px) {
    .input_form{
        display: flex;
        flex-direction: row;
        justify-content: center;
    }
    
    input{
        font-size: 20px;
        margin: 5px;
        /* background-color: transparent; */
        border: none;
        /* color: white; */
    }
    h1{
        flex-wrap: wrap;
        margin: 10px 60px;
        /* margin-right: 40vh; */
        max-width: 100%;
        text-align: center;
    }
  }






  # daco.py
import json
from abc import ABC, abstractmethod

def checkAttempts():
    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        if attempts["attempts"] == 3:
            return False
        else:
            return True



def unpacking():
    with open('output.json', 'r') as f:
        data = json.load(f)
        cislo_uctu = data["accountNumber"]
        select = data["select"]
        zostatok = data["balance"]

        with open('cislaUctov.json', 'r') as f:
            data_of_accounts = json.load(f)
            data_of_accounts = data_of_accounts["ucta"]
            numbers_all_accounts = []
            for number in data_of_accounts:
                numbers_all_accounts.append(number["cislo_uctu"])
            
            
        # Kontrola pri  ktorej zistujeme ci sa nachadza cislo uctu v databaze. 
        if cislo_uctu in numbers_all_accounts:
            pass
        else:
            return False
                    
    return cislo_uctu, select, zostatok, numbers_all_accounts, data_of_accounts


def opn(cislo_uctu, select, zostatok, valid_of_data, numbers_all_accounts):

    valid_of_data = {
        "ucet": {
        "cislo_uctu": True,
        "attempts": 0
        },
        "zostatok": False
}

    if valid_of_data["ucet"]["cislo_uctu"]:
        pass
    else:
        valid_of_data["ucet"]["attempts"] += 1
        return valid_of_data["ucet"]["attempts"]

    class BankovyUcet(ABC):
        def __init__(self, cislo_uctu, zostatok):
            self.__cislo_uctu = cislo_uctu
            self.__zostatok = zostatok

        @property
        def cislo_uctu(self):
            return self.__cislo_uctu

        @property
        def zostatok(self):
            return self.__zostatok

        @abstractmethod
        def vytvor_ucet(self):
            pass

        @abstractmethod
        def zobraz_stav(self):
            pass

        def vloz_peniaze(self, suma):
            if suma > 0:
                self.__zostatok += suma
                return suma, self.__cislo_uctu, self.__zostatok
            else:
                return "Vložená suma musí byť kladná."

        def vyber_peniaze(self, suma):
            if suma > self.__zostatok:
                return "Chyba. Ziadate viac ako mate na ucte"
            else:
                self.__zostatok -= suma
                return suma, self.__zostatok


    class OsobnyUcet(BankovyUcet):
        def vytvor_ucet(self):
            return f"Vytvoreny osobny ucet {self.cislo_uctu}"

        def zobraz_stav(self):
            return f"Stav na vasom osobnom ucte je {self.zostatok}"


    def selector():
        numberOfBank = cislo_uctu
        for i in data:
            if numberOfBank == i["cislo_uctu"]:
                # print("Pristup povoleny")
                # print("1. Vyber \n2. Vklad\n3. koniec")
                while True:
                    Q1 = select
                    try:
                        Q1 = int(Q1)
                        break
                    except ValueError:
                        print("Zla volba. Skuste znovu.")

                ucet = OsobnyUcet(i["cislo_uctu"], i["suma"])
                if Q1 == 1:
                    while True:
                        vyber = zostatok
                        try:
                            vyber = int(vyber)
                            if vyber < 0:
                                raise ValueError("Vyber musí byť kladné číslo.")
                            break
                        except ValueError as e:
                            print(e)
                    return ucet.vyber_peniaze(vyber)

                elif Q1 == 2:
                    while True:
                        vklad = input("Kolko chcete vlozit?")
                        try:
                            vklad = int(vklad)
                            if vklad < 0:
                                raise ValueError("Vklad musí byť kladné číslo.")
                            break
                        except ValueError as e:
                            print(e)
                    return ucet.vloz_peniaze(vklad)

                elif Q1 == 3:
                    print("Dovidenia")
                    exit()
            else:
                # print("tu som")

                pass

    with open('cislaUctov.json', 'r') as f:
        data = json.load(f)
        data = data["ucta"]

    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        attempts["attempts"] = 0

    with open('secret.json', 'w') as f:
        json.dump(attempts, f)

    result_from_selector = selector()
    return json.dumps(result_from_selector)
    # return data



def chyba():
    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        if attempts["attempts"] == 3:
            result_from_selector = "FatalError"
            return json.dumps(result_from_selector)



    result_from_selector = "Chyba"
    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        attempts_value = attempts.get("attempts", 0) + 1
        attempts["attempts"] = attempts_value

    with open('secret.json', 'w') as f:
        json.dump(attempts, f)

    return json.dumps(result_from_selector)


if checkAttempts():
    unpacking()
    # Vráti hodnoty ako reťazec
    if unpacking():
        print(opn(unpacking()[0], unpacking()[1], unpacking()[2], unpacking()[3], unpacking()[4]))
    else:
        print(chyba())
else:
    print(chyba())








# daco.py
import json
from abc import ABC, abstractmethod

def checkAttempts():
    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        if attempts["attempts"] == 3:
            return False
        else:
            return True



def unpacking():
    # Databaza cisiel uctov
    numbers_all_accounts = []

    with open('output.json', 'r') as f:
        data = json.load(f)
        cislo_uctu = data["accountNumber"]
        select = data["select"]
        zostatok = data["balance"]

        with open('cislaUctov.json', 'r') as f:
            data_of_accounts = json.load(f)
            data_of_accounts = data_of_accounts["ucta"]
            for number in data_of_accounts:
                numbers_all_accounts.append(number["cislo_uctu"])
            
            
        # Kontrola pri  ktorej zistujeme ci sa nachadza cislo uctu v databaze. 
        if cislo_uctu in numbers_all_accounts:
            pass
        else:
            return False
                    
    return cislo_uctu, select, zostatok, numbers_all_accounts, data_of_accounts


def opn(cislo_uctu, select, zostatok):


    class BankovyUcet(ABC):
        def __init__(self, cislo_uctu, zostatok):
            self.__cislo_uctu = cislo_uctu
            self.__zostatok = zostatok

        @property
        def cislo_uctu(self):
            return self.__cislo_uctu

        @property
        def zostatok(self):
            return self.__zostatok

        @abstractmethod
        def vytvor_ucet(self):
            pass

        @abstractmethod
        def zobraz_stav(self):
            pass

        def vloz_peniaze(self, suma):
            if suma > 0:
                self.__zostatok += suma
                return suma, self.__cislo_uctu, self.__zostatok
            else:
                return "Vložená suma musí byť kladná."

        def vyber_peniaze(self, suma):
            if suma > self.__zostatok:
                return "Chyba. Ziadate viac ako mate na ucte"
            else:
                self.__zostatok -= suma
                return suma, self.__zostatok


    class OsobnyUcet(BankovyUcet):
        def vytvor_ucet(self):
            return f"Vytvoreny osobny ucet {self.cislo_uctu}"

        def zobraz_stav(self):
            return f"Stav na vasom osobnom ucte je {self.zostatok}"


    def selector():
        numberOfBank = cislo_uctu
        for i in data:
            if numberOfBank == i["cislo_uctu"]:
                while True:
                    Q1 = select
                    try:
                        Q1 = int(Q1)
                        break
                    except ValueError:
                        print("Zla volba. Skuste znovu.")

                ucet = OsobnyUcet(i["cislo_uctu"], i["suma"])
                if Q1 == 1:
                    while True:
                        vyber = zostatok
                        try:
                            vyber = int(vyber)
                            if vyber < 0:
                                raise ValueError("Vyber musí byť kladné číslo.")
                            break
                        except ValueError as e:
                            print(e)
                    return ucet.vyber_peniaze(vyber)

                elif Q1 == 2:
                    while True:
                        vklad = input("Kolko chcete vlozit?")
                        try:
                            vklad = int(vklad)
                            if vklad < 0:
                                raise ValueError("Vklad musí byť kladné číslo.")
                            break
                        except ValueError as e:
                            print(e)
                    return ucet.vloz_peniaze(vklad)

                elif Q1 == 3:
                    print("Dovidenia")
                    exit()

    with open('cislaUctov.json', 'r') as f:
        data = json.load(f)
        data = data["ucta"]

    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        attempts["attempts"] = 0

    with open('secret.json', 'w') as f:
        json.dump(attempts, f)

    result_from_selector = selector()
    return json.dumps(result_from_selector)



def chyba():
    with open('secret.json', 'r') as r:
        attempts = json.load(r)
        if attempts["attempts"] == 3:
            result_from_selector = "FatalError"
            return json.dumps(result_from_selector)
        else:
            result_from_selector = "Chyba"
            attempts_value = attempts.get("attempts", 0) + 1
            attempts["attempts"] = attempts_value
            with open('secret.json', 'w') as f:
                json.dump(attempts, f)
            return json.dumps(result_from_selector)


if checkAttempts():
    unpacking()
    # Vráti hodnoty ako reťazec
    if unpacking():
        print(opn(unpacking()[0], unpacking()[1], unpacking()[2]))
    else:
        print(chyba())
else:
    print(chyba())

